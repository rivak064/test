# This is a basic workflow to help you get started with Actions

name: Build & Deploy
on:
  push:
    branches:
      - staging
      - prod
env:
  APP_NAME: ${{ secrets.APP_NAME }}
  STAGING_TEMPLATE_API: https://staging-api.covault.app
  PRODUCTION_TEMPLATE_API: https://prod-api.covault.app
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set env.BRANCH
        run: echo "BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_ENV
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Docker Image
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        run: |
          if [ "${BRANCH}" = "staging" ]; then
            export TEMPLATE_API=${env.STAGING_TEMPLATE_API}
            export STRIPE_KEY=${{ secrets.STAGING_STRIPE_KEY }}
          elif [ "${BRANCH}" = "prod" ]; then
            export TEMPLATE_API=${env.PRODUCTION_TEMPLATE_API}
            export STRIPE_KEY=${{ secrets.PROD_STRIPE_KEY }}
          fi
          docker build \
            --build-arg TEMPLATE_API \
            --build-arg STRIPE_KEY \
            -t ${REGISTRY}/${APP_NAME}:${BRANCH} \
            -f docker/Dockerfile .
          echo "IMAGE=${REGISTRY}/${APP_NAME}:${BRANCH}" >> $GITHUB_ENV
      - name: Push Docker Image
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        run: docker push ${REGISTRY}/${APP_NAME}:${BRANCH}
      - name: Save task definition to file and set cluster
        run: |
          mkdir -p .aws
          if [ "${BRANCH}" = "staging" ]; then
            echo '${{ secrets.STAGING_TASK_DEFINITION }}' > .aws/task-definition.json
            echo "CLUSTER=${{ secrets.STAGING_CLUSTER }}" >> $GITHUB_ENV
          elif [ "${BRANCH}" = "prod" ]; then
            echo '${{ secrets.PRODUCTION_TASK_DEFINITION }}' > .aws/task-definition.json
            echo "CLUSTER=${{ secrets.PRODUCTION_CLUSTER }}" >> $GITHUB_ENV
          fi
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: ${{ env.APP_NAME }}
          image: ${{ steps.ecr.outputs.registry }}/${{ env.APP_NAME }}:${{ env.BRANCH }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.APP_NAME }}
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: false
